"""The expyriment randomize module.

This module contains various functions for randomizing data

"""

__author__ = 'Florian Krause <siebenhundertzehn@gmail.com>,\
              Oliver Lindemann <lindemann09@gmail.com>'
__version__ = '0.6.2'
__revision__ = '23032f47ffea'
__date__ = 'Wed Dec 12 15:49:59 2012 +0100'


from copy import copy as _copy
import random as _random

_random.seed()


def rand_int_sequence(first_elem, last_elem):
    """Return a randomised sequence of integers in given range.

    Keyword arguments:
    first_elem -- the first element of the range
    last_elem  -- the last element of the range

    """

    list_ = range(first_elem, last_elem + 1)
    _random.shuffle(list_)
    return list_


def rand_int(a, b):
    """Return random integer in given range.

    Keyword arguments:
    a -- the first element of range
    b -- the last element of range

    """

    return _random.randint(a, b)


def coin_flip():
    """Return randomly True or False."""

    if _random.randint(1, 2) == 1:
        return True
    else:
        return False


def shuffle_list(list_):
    """Shuffle any list of objects.

    Keyword arguments:
    list_ -- list to shuffle

    """

    _random.shuffle(list_)


def make_multiplied_shuffled_list(list_, xtimes):
    """Return the multiplied and shuffled (sectionwise) list.

    The function manifolds the list 'xtimes' and shuffles each
    and concatenates to the return new lists.

    Keyword arguments:
    list_  -- the list to beshuffled
    xtimes -- how often the list will be multiplied

    """

    newlist = []
    tmp = _copy(list_)
    for _i in range(0, xtimes):
        _random.shuffle(tmp)
        newlist.extend(tmp)
    return newlist
