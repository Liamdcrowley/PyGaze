"""
Audio playback.

This module contains a class implementing audio playback.

"""

__author__ = 'Florian Krause <siebenhundertzehn@gmail.com>, \
Oliver Lindemann <lindemann09@gmail.com>'
__version__ = '0.6.2'
__revision__ = '23032f47ffea'
__date__ = 'Wed Dec 12 15:49:59 2012 +0100'


import os

import pygame
import expyriment
from _stimulus import Stimulus


class Audio(Stimulus):
    """A class implementing a general auditory stimulus.

    Please see also:
        expyriment.control.start_audiosystem
        expyriment.control.stop_audiosystem
        expyriment.control.audiosystem_is_busy
        expyriment.control.audiosystem_wait_end

    """

    def __init__(self, filename):
        """Create an audio stimulus.

        Keyword arguments:
        filename  -- the filename (str)

        """

        Stimulus.__init__(self, filename)
        self._filename = filename
        self._file = None
        self._is_preloaded = False
        if not(os.path.isfile(self._filename)):
            raise IOError("File {0} does not exists".format(self._filename))

    _getter_exception_message = "Cannot set {0} if preloaded!"

    @property
    def is_preloaded(self):
        """Getter for is_preloaded"""

        return self._is_preloaded

    @property
    def filename(self):
        """Getter for filename"""

        return self._filename

    @filename.setter
    def filename(self, value):
        """Setter for filename."""

        if self._is_preloaded:
            raise AttributeError(Audio._getter_exception_message.format(
                "filename"))
        else:
            self._filename = value

    def copy(self):
        """Copy the stimulus.

        Returned copy will NOT be is_preloaded!

        """

        was_loaded = self._is_preloaded
        self.unload()
        rtn = Stimulus.copy(self)
        if was_loaded:
            self.preload()
        return rtn

    def preload(self):
        """Preload stimulus to memory."""

        if not self._is_preloaded:
            self._file = pygame.mixer.Sound(self.filename)
            self._is_preloaded = True

    def unload(self):
        """Unload stimulus from memory.

        This removes the reference to the object in memory.
        It is up to the garbage collector to actually remove it from memory.

        """

        if self._is_preloaded:
            self._file = None
            self._is_preloaded = False

    def play(self, loops=0, maxtime=0, fade_ms=0):
        """Play the audio stimulus.

        The function returns immediately after the sound started to play.
        A pygame.mixer.Channel object is returned.

        Keyword arguments:
        loops   -- how often to repeat (-1 = forever) (int) (default = 0)
        maxtime -- stop after given amount of milliseconds (int) (default = 0)
        fade_ms -- fade in time in milliseconds (int) (default = 0)

        """

        if not self._is_preloaded:
            self.preload()
        rtn = self._file.play(loops, maxtime, fade_ms)
        expyriment._active_exp._event_file_log("Stimulus,played,{0}"\
                                   .format(self._filename), 1)
        return rtn

    def stop(self):
        """Stop the audio stimulus"""

        if self._is_preloaded:
            self._file.stop()

    def present(self):
        """Presents the sound.

        The function is identical to Audio.play(loops=0, maxtime=0, fade_ms=0)
        and returns also immediately after the sound started to play.
        See Audio.play for more information.

        """

        self.play()
