#!/usr/bin/env python

"""
A fixation cross stimulus.

This module contains a class implementing a fixation cross stimulus.

"""

__author__ = 'Florian Krause <siebenhundertzehn@gmail.com>, \
Oliver Lindemann <lindemann09@gmail.com>'
__version__ = '0.6.2'
__revision__ = '23032f47ffea'
__date__ = 'Wed Dec 12 15:49:59 2012 +0100'


import defaults
from _shape import Shape
import expyriment

class FixCross(Shape):
    """A class implementing a general fixation cross."""

    def __init__(self, cross_size=None, position=None, line_width=None,
                 colour=None, anti_aliasing=None):
        """Create a fixation cross.

        Keyword arguments:
        cross_size    -- the size of the cross (int)
        position      -- the position of the stimulus (int,int)
        line_width    -- width of the lines (int)
        colour        -- the colour (int,int,int) (optional)
        anti_aliasing -- the anti aliasing parameter (int)

        """

        if position is None:
            position = defaults.fixcross_position
        if colour is None:
            colour = defaults.fixcross_colour
        if colour is not None:
            self._colour = colour
        else:
            self._colour = expyriment._active_exp.foreground_colour
        if anti_aliasing is None:
            anti_aliasing = defaults.fixcross_anti_aliasing
        Shape.__init__(self, position=position, colour=colour,
                         anti_aliasing=anti_aliasing)
        if cross_size is None:
            cross_size = defaults.fixcross_size
        if line_width is None:
            line_width = defaults.fixcross_line_width
        self._cross_size = cross_size
        self._line_width = line_width

        a = (self._cross_size - line_width) / 2
        self.add_vertex((line_width, 0))
        self.add_vertex((0, -a))
        self.add_vertex((a, 0))
        self.add_vertex((0, -line_width))
        self.add_vertex((-a, 0))
        self.add_vertex((0, -a))
        self.add_vertex((-line_width , 0))
        self.add_vertex((0, a))
        self.add_vertex((-a, 0))
        self.add_vertex((0, line_width))
        self.add_vertex((a, 0))

    @property
    def cross_size(self):
        """Getter for cross_size."""

        return self._cross_size

    @property
    def line_width(self):
        """Getter for line_width."""

        return self._line_width


if __name__ == "__main__":
    from expyriment import control
    control.set_develop_mode(True)
    defaults.event_logging = 0
    exp = control.initialize()
    fixcross = FixCross()
    fixcross.present()
    exp.clock.wait(1000)
