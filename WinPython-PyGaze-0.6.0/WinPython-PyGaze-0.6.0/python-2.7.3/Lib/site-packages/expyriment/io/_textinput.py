"""
A text input box.

This module contains a class implementing a text input box for user input.

"""

__author__ = 'Florian Krause <siebenhundertzehn@gmail.com>, \
Oliver Lindemann <lindemann09@gmail.com>'
__version__ = '0.6.2'
__revision__ = '23032f47ffea'
__date__ = 'Wed Dec 12 15:49:59 2012 +0100'


import os

import pygame

import defaults
import expyriment
from _input_output import Input


class TextInput(Input):
    """A class implementing a text input box."""

    def __init__(self, message, ascii_filter=None, length=None,
                 message_text_size=None, message_colour=None,
                 message_font=None, message_bold=None, message_italic=None,
                 user_text_size=None, user_colour=None, background_colour=None,
                 frame_colour=None, gap=None, screen=None):
        """Create a text input box.

        This stimulus is not optimized for timing accurate presentation!

        Keyword arguments:
        message           -- the message to show (str)
        ascii_filter      -- a list of ASCII codes to filter for (list)
                             (optional)
        message_text_size -- the text size of the message (int) (optional)
        message_colour    -- the text colour of the message (int,int,int)
                             (optional)
        message_font      -- the text font of the message (str) (optional)
        message_bold      -- True if message text should be bold (bool)
                             (optional)
        message_italic    -- True if message text should be italic (bool)
                             (optional)
        user_text_size    -- the text size of the user input (int) (optional)
        user_colour       -- the text colour of the user input (int,int,int)
                             (optional)
        background_colour -- the background colour (int,int,int) (optional)
        frame_colour      -- the colour of the frame (int,int,int) (optional)
        gap               -- the gap between message and user input (optional)
        screen            -- a screen to present on (expyriment.io.Screen
                             object) (optional)

        """

        if not expyriment._active_exp.is_initialized:
            raise RuntimeError(
                "Cannot create TextInput before expyriment.initialize()!")
        Input.__init__(self)
        self._message = message
        if ascii_filter is not None:
            self._ascii_filter = ascii_filter
        else:
            self._ascii_filter = defaults.textinput_ascii_filter
        if length is not None:
            self._length = length
        else:
            self._length = defaults.textinput_length
        if message_text_size is None:
            message_text_size = defaults.textinput_message_text_size
        if message_text_size is not None:
            self._message_text_size = message_text_size
        else:
            self._message_text_size = expyriment._active_exp.text_size
        if message_colour is None:
            message_colour = defaults.textinput_message_colour
        if message_colour is not None:
            self._message_colour = message_colour
        else:
            self._message_colour = expyriment._active_exp.foreground_colour
        if message_font is None:
            message_font = defaults.textinput_message_font
        if message_font is not None:
            self._message_font = message_font
        else:
            self._message_font = expyriment._active_exp.text_font
        try:
            _font = pygame.font.Font(self._message_font, self._text_size)
        except:
            actual_font = pygame.font.match_font(self._message_font)
            if actual_font is None:
                self._message_font = pygame.font.get_default_font().split(".")[0]
            else:
                fullpath = pygame.font.match_font(self._message_font)
                filename = fullpath.split(os.path.sep)[-1]
                self._message_font = filename.split(".")[0]
        if message_bold is not None:
            self._message_bold = message_bold
        else:
            self._message_bold = defaults.textinput_message_bold
        if message_italic is not None:
            self._message_italic = message_italic
        else:
            self._message_italic = defaults.textinput_message_italic
        if user_text_size is None:
            user_text_size = defaults.textinput_user_text_size
        if user_text_size is not None:
            self._user_text_size = user_text_size
        else:
            self._user_text_size = expyriment._active_exp.text_size
        if user_colour is None:
            user_colour = defaults.textinput_user_colour
        if user_colour is not None:
            self._user_colour = user_colour
        else:
            self._user_colour = expyriment._active_exp.foreground_colour
        if background_colour is None:
            background_colour = \
                    defaults.textinput_background_colour
        if background_colour is not None:
            self._background_colour = background_colour
        else:
            self._background_colour = \
                    expyriment._active_exp.background_colour
        if frame_colour is None:
            frame_colour = defaults.textinput_frame_colour
        if frame_colour is not None:
            self._frame_colour = frame_colour
        else:
            self._frame_colour = expyriment._active_exp.foreground_colour
        if gap is not None:
            self._gap = gap
        else:
            self._gap = defaults.textinput_gap
        if screen is not None:
            self._screen = screen
        else:
            self._screen = expyriment._active_exp.screen
        self._user = []
        self._user_text_surface_size = None
        self._max_size = None
        self._message_surface_size = None
        self._canvas = None
        self._canvas_size = None

    @property
    def message(self):
        """Getter for message"""
        return self._message

    @property
    def ascii_code_filter(self):
        """Getter for filter"""
        return self._ascii_filter

    @ascii_code_filter.setter
    def ascii_code_filter(self, value):
        """Getter for filter"""
        self._ascii_filter = value

    @property
    def message_text_size(self):
        """Getter for message_text_size"""
        return self._message_text_size

    @property
    def length(self):
        """Getter for length"""
        return self._length

    @property
    def message_colour(self):
        """Getter for message_colour"""
        return self._message_colour

    @property
    def message_font(self):
        """Getter for message_font"""
        return self._message_font

    @property
    def message_bold(self):
        """Getter for message_bold"""
        return self._message_bold

    @property
    def message_italic(self):
        """Getter for message_italic"""
        return self._message_italic

    @property
    def user_text_size(self):
        """Getter for user_size"""
        return self._user_text_size

    @property
    def user_colour(self):
        """Getter for user_colour"""
        return self._user_colour

    @property
    def background_colour(self):
        """Getter for background_colour"""
        return self._background_colour

    @property
    def frame_colour(self):
        """Getter for frame_colour"""
        return self._frame_colour

    @property
    def gap(self):
        """Getter for gap"""
        return self._gap

    @property
    def screen(self):
        """Getter for screen"""
        return self._screen

    def _get_key(self):
        """Get a key press."""

        while True:
            expyriment._active_exp._execute_wait_callback()
            event = pygame.event.poll()
            if event.type == pygame.KEYDOWN:
                return event.key, event.unicode

    def _create(self):
        """Create the input box."""

        tmp = expyriment.stimuli.TextLine(text=self._length * "X",
                               text_font='Monospace',
                               text_size=self.user_text_size,
                               text_bold=True)
        expyriment.stimuli._stimulus.Stimulus._id_counter -= 1
        self._max_size = tmp.surface_size
        message_text = expyriment.stimuli.TextLine(
            text=self._message, text_font=self.message_font,
            text_size=self.message_text_size, text_bold=self.message_bold,
            text_italic=self.message_italic, text_colour=self.message_colour,
            background_colour=self._background_colour)
        expyriment.stimuli._stimulus.Stimulus._id_counter -= 1
        self._message_surface_size = message_text.surface_size
        self._canvas = expyriment.stimuli.Canvas(size=(
            max(self._max_size[0] + 12, self._message_surface_size[0]),
            self._message_surface_size[1] + self._max_size[1] + self._gap + 5),
            colour=self._background_colour)
        expyriment.stimuli._stimulus.Stimulus._id_counter -= 1
        self._canvas._set_surface(self._canvas._get_surface())
        self._canvas_size = self._canvas.surface_size
        pygame.draw.rect(self._canvas._get_surface(), self._background_colour,
                         (self._canvas_size[0] / 2 - self._max_size[0] / 2 - 6,
                          self._message_surface_size[1] + self._gap,
                          self._max_size[0] + 12, self._max_size[1] + 5), 0)
        pygame.draw.rect(self._canvas._get_surface(), self._frame_colour,
                         (self._canvas_size[0] / 2 - self._max_size[0] / 2 - 6,
                          self._message_surface_size[1] + self._gap,
                          self._max_size[0] + 12, self._max_size[1] + 5), 1)
        if len(self._message) != 0:
                    self._canvas._get_surface().blit(
                        message_text._get_surface(),
                        (self._canvas.surface_size[0] / 2 - \
                         self._message_surface_size[0] / 2, 0))
        self._canvas.present()
        self._canvas.present() # for flipping with double buffer
        self._canvas.present() # for flipping with tripple buffer

    def _update(self):
        """Update the input box."""

        user_canvas = expyriment.stimuli.Canvas(
            size=self._max_size, colour=self._background_colour)
        expyriment.stimuli._stimulus.Stimulus._id_counter -= 1
        user_canvas._set_surface(user_canvas._get_surface())
        user_canvas_size = user_canvas.surface_size
        offset = 2 + user_canvas_size[1] % 2
        user_canvas.position = (self._canvas.absolute_position[0],
                                     self._canvas.absolute_position[1] + \
                                     self._canvas_size[1] / 2 - \
                                     user_canvas_size[1] / 2 - \
                                     self._message_surface_size[1] - self._gap - offset)
        user_text = expyriment.stimuli.TextLine(
            text="".join(self._user), text_font='Monospace',
            text_size=self.user_text_size, text_bold=True,
            text_colour=self.user_colour,
            background_colour=self.background_colour)
        expyriment.stimuli._stimulus.Stimulus._id_counter -= 1
        self._user_text_surface_size = user_text.surface_size
        user_canvas._get_surface().blit(user_text._get_surface(), (0, 2))
        user_canvas.present(clear=False)

    def get(self, default_input=""):
        """Get input from user.

        This displays and updates the input box automatically. Pressing ENTER
        returns the user input. Pressing ESC quits, returning an empty string.

        Keyword arguments:
        default_input -- the default input in the textbox (str) (optional)

        """

        self._user = []
        for char in default_input:
            self._user.append(char)
        self._create()
        self._update()
        if self._ascii_filter is None:
            ascii_filter = range(0, 256)
        else:
            ascii_filter = self._ascii_filter
        while True:
            inkey, string = self._get_key()
            if inkey == pygame.K_BACKSPACE:
                self._user = self._user[0:-1]
            elif inkey == pygame.K_RETURN:
                break
            elif inkey != pygame.K_LCTRL or pygame.K_RCTRL:
                if not self._user_text_surface_size[0] >= self._max_size[0]:
                    if string and ord(string) in ascii_filter:
                        self._user.append(string)
            self._update()
        got = "".join(self._user)
        expyriment._active_exp._event_file_log("TextInput,entered,{0}"\
                                              .format(got))
        return got


if __name__ == '__main__':
    from expyriment import control
    control.set_develop_mode(True)
    defaults.event_logging = 0
    exp = control.initialize()
    textinput = TextInput(message="Subject Number:",
                          message_colour=(160, 70, 250),
                          user_text_size=30,
                          user_colour=(255, 150, 50),
                          frame_colour=(70, 70, 70))
    print textinput.get()
