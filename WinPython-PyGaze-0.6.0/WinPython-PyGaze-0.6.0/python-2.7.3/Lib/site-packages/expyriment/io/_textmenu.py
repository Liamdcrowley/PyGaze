"""
A TextMenu.

This module contains a class implementing a TextMenu.

"""

__author__ = 'Florian Krause <siebenhundertzehn@gmail.com>, \
Oliver Lindemann <lindemann09@gmail.com>'
__version__ = '0.6.2'
__revision__ = '23032f47ffea'
__date__ = 'Wed Dec 12 15:49:59 2012 +0100'

import defaults
import expyriment
from _keyboard import Keyboard
from _input_output import Input


class TextMenu(Input):
    """A class implementing a text menu."""

    def __init__(self, heading, menu_items, width, position=None,
                 text_size=None, gap=None, background_color=None,
                 text_colour=None, heading_text_colour=None,
                 select_backgound_colour=None, select_text_colour=None,
                 select_frame_colour=None, select_frame_line_width=None,
                 justification=None, scroll_menu=None,
                 background_stimulus=None):
        """Create a text menu.

        This creates a menu with items to be selected.

        Keyword arguments:
        heading                 -- the menu heading (str)
        menu_items              -- list with menu items (list of str)
        width                   -- the width of the menu (int)
        position                -- the position (int,int) (optional)
        text_size               -- the text size (int) (optional)
        background_color        -- the background colour of the menu
                                   (int, int, int) (optional)
        gap                     -- the size of gap (pixel) between heading and
                                   item list (int) (optional)
        text_colour             -- the text colour of the items (int,int,int)
                                   (optional)
        heading_text_colour     -- the text colour of the heading
                                   (int,int,int) (optional)
        select_backgound_colour -- the background colour of the currently
                                   selected item (int,int,int) (optional)
        select_text_colour      -- the text colour of the currently selected
                                   item (int,int,int) (optional)
        select_frame_colour     -- the colour of the frame around the selected
                                   item (int,int,int) (optional)
        select_frame_line_width -- the line width of the frame around the
                                   selected item (int) (optional)
        justification           -- the text justification: 0 (left), 1
                                   (center), 2 (right) (int) (optional)
        scroll_menu             -- the maximum length of a item list before a
                                   scroll menu will be display. If the
                                   parameter is 0 of False scroll menu will not
                                   be displayed (int) (optional)
        background_stimulus     -- a stimulus on which the menu will be
                                   plotted (expyriment.stimuli.* object)
                                   (optional)

        """

        if position is None:
            position = defaults.menu_position
        if gap is None:
            gap = defaults.menu_gap
        if text_size is None:
            text_size = defaults.menu_text_size
        if background_color is None:
            background_color = defaults.menu_background_color
        if text_colour is None:
            text_colour = defaults.menu_text_colour
        if heading_text_colour is None:
            heading_text_colour = defaults.menu_heading_text_colour
        if select_backgound_colour is None:
            select_backgound_colour = defaults.menu_select_backgound_colour
        if select_text_colour is None:
            select_text_colour = defaults.menu_select_text_colour
        if select_frame_colour is None:
            select_frame_colour = defaults.menu_select_frame_colour
        if select_frame_line_width is None:
            select_frame_line_width = defaults.menu_select_frame_line_width
        if justification is None:
            justification = defaults.menu_justification
        if scroll_menu is None:
            scroll_menu = defaults.menu_scroll_menu


        self._scroll_menu = abs(int(scroll_menu))
        if self._scroll_menu > 0 and self._scroll_menu < 5:
            self._scroll_menu = 5
        self._gap = gap
        self._position = position
        self._bkg_colours = [background_color, select_backgound_colour]
        self._text_colours = [text_colour, select_text_colour]
        self._line_size = (width, expyriment.stimuli.TextLine(menu_items[0],
                                 text_size=text_size).surface_size[1] + 2)
        expyriment.stimuli._stimulus.Stimulus._id_counter -= 1
        self._frame = expyriment.stimuli.Frame(
                        frame_line_width=select_frame_line_width,
                        size=(self._line_size[0] + 2 * select_frame_line_width,
                        self._line_size[1] + 2 * select_frame_line_width),
                        colour=select_frame_colour)
        expyriment.stimuli._stimulus.Stimulus._id_counter -= 1
        if background_stimulus is not None:
            if background_stimulus.__class__.__base__ == \
                                            expyriment.stimuli._visual.Visual:
                self._background_stimulus = background_stimulus
            else:
                raise AttributeError("{0} ".format(type(background_stimulus)) +
                                     "is not a valid background stimulus. " +
                                     "Use an expyriment visual stimulus.")

        else:
            self._background_stimulus = None

        self._canvas = expyriment.stimuli.BlankScreen()
        expyriment.stimuli._stimulus.Stimulus._id_counter -= 1
        self._menu_items = []
        for item in menu_items:
            self._menu_items.append(expyriment.stimuli.TextBox(
                              "{0}".format(item),
                              text_size=text_size, text_font='Helvetica',
                              text_justification=justification,
                              size=self._line_size))
            expyriment.stimuli._stimulus.Stimulus._id_counter -= 1
        self._heading = expyriment.stimuli.TextBox(heading,
                                    text_size=text_size,
                                    text_justification=justification,
                                    text_font='Helvetica',
                                    text_colour=heading_text_colour,
                                    text_bold=True,
                                    background_colour=self._bkg_colours[0],
                                    size=self._line_size)
        expyriment.stimuli._stimulus.Stimulus._id_counter -= 1

    @property
    def heading(self):
        """Getter for heading"""
        return self._heading

    @property
    def menu_items(self):
        """Getter for menu_items"""
        return self._menu_items

    @property
    def position(self):
        """Getter for position"""
        return self._position

    @property
    def text_size(self):
        """Getter for text_size"""
        return self._heading.text_size

    @property
    def background_color(self):
        """Getter for background_color"""
        return self._bkg_colours[0]

    @property
    def select_backgound_colour(self):
        """Getter for select_backgound_colour"""
        return self._bkg_colours[1]

    @property
    def gap(self):
        """Getter for gap"""
        return self._gap

    @property
    def text_colour(self):
        """Getter for text_colour"""
        return self._text_colours[0]

    @property
    def select_text_colour(self):
        """Getter for select_text_colour"""
        return self._text_colours[1]

    @property
    def heading_text_colour(self):
        """Getter for heading_text_colour"""
        return self._heading.text_colour

    @property
    def select_frame_colour(self):
        """Getter for select_frame_colour"""
        return self._frame.colour

    @property
    def select_frame_line_width(self):
        """Getter for select_frame_line_width"""
        return self._frame.line_width

    @property
    def justification(self):
        """Getter for justification"""
        return self._heading.text_justification

    @property
    def scroll_menu(self):
        """Getter for scroll_menu"""
        return self._scroll_menu

    @property
    def background_stimulus(self):
        """Getter for background_stimulus"""
        return self._background_stimulus

    def _append_item(self, item, is_selected, y_position):
        """helper function"""
        item.clear_surface()
        item.position = (self._position[0], y_position + self._position[1])
        if is_selected:
            item.background_colour = self._bkg_colours[1]
            item.text_colour = self._text_colours[1]
        else:
            item.background_colour = self._bkg_colours[0]
            item.text_colour = self._text_colours[0]
        item.plot(self._canvas)

    def _redraw(self, selected_item):
        """helper function"""
        if self._scroll_menu > 0:
            n = self._scroll_menu
        else:
            n = len(self._menu_items)
        self._canvas.clear_surface()
        if self._background_stimulus is not None:
            self._background_stimulus.plot(self._canvas)
        y_pos = int(((1.5 + n) * self._line_size[1]) + (n * self._gap)) / 2
        self._heading.position = (self._position[0], y_pos + self._position[1])
        self._heading.plot(self._canvas)
        y_pos = y_pos - int(0.5 * self._line_size[1])

        if self._scroll_menu == 0:
            for cnt, item in enumerate(self._menu_items):
                y_pos -= (self._line_size[1] + self._gap)
                self._append_item(item, cnt == selected_item, y_pos)
                if cnt == selected_item:
                    self._frame.position = (0, y_pos)
        else: #scroll menu
            for cnt in range(selected_item - self._scroll_menu / 2,
                             selected_item + 1 + self._scroll_menu / 2):
                y_pos -= (self._line_size[1] + self._gap)
                if cnt >= 0 and cnt < len(self._menu_items):
                    self._append_item(self._menu_items[cnt], cnt == selected_item,
                                      y_pos)
                    if cnt == selected_item:
                        self._frame.position = (0, y_pos)

        if self._frame.line_width > 0:
            self._frame.plot(self._canvas)
        self._canvas.present()

    def get(self, preselected_item=0):
        """Present the menu and return the selected item.

        Returns an integer representing the selected item in the list

        """

        selected = preselected_item
        while True:
            self._redraw(selected)
            key = Keyboard().wait()[0]
            if key == expyriment.misc.constants.K_UP:
                selected -= 1
            elif key == expyriment.misc.constants.K_DOWN:
                selected += 1
            elif key in expyriment.misc.constants.K_ALL_DIGITS and\
                        key > expyriment.misc.constants.K_0:
                selected = key - expyriment.misc.constants.K_1
            elif key == expyriment.misc.constants.K_RETURN:
                break
            if selected < 0:
                selected = 0
            elif selected >= len(self._menu_items):
                selected = len(self._menu_items) - 1

        return selected


if __name__ == "__main__":
    from expyriment import control
    control.set_develop_mode(True)
    exp = control.initialize(event_logging=0)

    menu = TextMenu(heading="Expyriment TextMenu", \
                items=["Items 1", "Items 1", "Items 3", "Items 4", "Items 5"],
                width=250)
    print menu.get()
