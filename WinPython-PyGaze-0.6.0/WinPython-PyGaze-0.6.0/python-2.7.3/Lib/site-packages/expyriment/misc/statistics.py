"""
The statistics module.

This module contains miscellaneous stastistical functions for expyriment.

"""

__author__ = 'Florian Krause <siebenhundertzehn@gmail.com>, \
Oliver Lindemann <lindemann09@gmail.com>'
__version__ = '0.6.2'
__revision__ = '23032f47ffea'
__date__ = 'Wed Dec 12 15:49:59 2012 +0100'


def sum(data):
    """Returns the sum of data.
    
    The function ignores all non-numerical elements in the data and returns
    None if no numerical element has been found. In contrast to standard math 
    and numpy functions, this function is robust against type violations.

    Keyword argument:
    data -- a list of numerical data
    
    """

    s = 0
    elem_found = False
    for v in data:
        try:
            s += v
            elem_found = True
        except:
            pass
    if elem_found:
        return s
    else:
        return None


def mode(data):
    """Returns the mode, that is, the most frequent value in data.
    
    Keyword argument:
    data -- a list of data
    
    """

    freq = frequence_table(data)
    Fmax = max(freq.values())
    for x, f in freq.items():
        if f == Fmax:
            break
    return x

def mean(data):
    """Returns the mean of data.
    
    The function ignores all non-numerical elements in the data and returns
    None if no numerical element has been found. In contrast to standard math 
    and numpy functions, this function is robust against type violations.

    Keyword argument:
    data -- a list of numerical data
    
    """

    s = 0
    cnt = 0
    for v in data:
        try:
            s += v
            cnt += 1
        except:
            pass
    if cnt == 0:
        return None
    else:
        return float(s) / float(cnt)

def median(data):
    """Returns the median of data.
    
    The function ignores all non-numerical elements in the data and returns
    None if no numerical element has been found. In contrast to standard math 
    and numpy functions, this function is robust against type violations.

    Keyword argument:
    data -- a list of numerical data
    
    """

    tmp = []
    for elem in data: # remove non numerics
        if isinstance(elem, (int, long, float)):
            tmp.append(elem)
    data = sorted(tmp)
    if len(data) % 2 == 1:
        return data[(len(data) - 1) / 2 ]
    else:
        lower = data[len(data) / 2 - 1]
        upper = data[len(data) / 2]
        return (float(lower + upper)) / 2.0

def frequence_table(data):
    """Returns the frequency table of the data as dictionary.
    
    Format of returns dictionary: dict.keys   --> values, 
                                  dict.values --> frequencies
    
    Keyword argument:
    data -- a list of data
    
    """

    freq = {}
    for x in data:
        freq[x] = freq.get(x, 0) + 1
    return freq

